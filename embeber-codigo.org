* Embeber y ejecutar trozos de código

Los trozos de código comienzan con una etiqueta ~#+BEGIN_SRC~ y se cierran con una etiqueta ~#+END_SRC~ (mayúsculas o minúsculas, no importa, pero la convención es utlizar mayúsculas).
Opcionalmente se les puede dar un nombre con la etiqueta ~#+NAME~. Como escribir una y otra vez estas etiquetas es un poco trabajoso, puedes escribir ~<s-TAB~ (eso es, escribir ~<s~ y luego dar al tabulador) para que org-mode inserte
las etiquetas de apertura y fin por ti.

Para resaltar los trozos de código según la sintaxis del lenguaje añade esto a tu ~init.el~:

#+BEGIN_SRC elisp
(setq org-src-fontify-natively t)
#+END_SRC

~C-c '~
    Abre el trozo de código actual en un buffer con el modo correspondiente

** Evaluación de código

Antes que nada, carga los lenguajes que usaras en tus trozos de código:

#+BEGIN_SRC elisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (emacs-lisp . t)
   (python . t)
   (sh . t)
  ))
#+END_SRC

Cada vez que intentas evaluar un trozo de código, org te preguntará si estás seguro de querer hacerlo. De todos modos es fácilmente desactivable:

#+BEGIN_SRC elisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC

~C-c C-c~
    Evalúa el contenido del trozo de código mostrando el resultado a continuación

~C-c C-o~
    Evalúa el contenido del trozo de código mostrando el resultado en nuevo buffer

Por defecto el resultado es el valor de la última expresión en el trozo de código.

#+NAME: elisp-expression
#+BEGIN_SRC elisp
(+ 40 2)
#+END_SRC

Sin embargo hay ocasiones en las que nos interesan varios resultados.

#+NAME: python-function
#+BEGIN_SRC python :results output
def greeter(name):
    print("Hello {}".format(name))

greeter("World")
greeter("Universe")
#+END_SRC

** TODO Exportación
